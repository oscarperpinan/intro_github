#+TITLE: Introducción al control de versiones y trabajo colaborativo con GitHub
#+AUTHOR: Oscar Perpiñán Lamigueiro
#+DATE:
#+STARTUP: beamer
#+STARTUP: indent
#+SETUPFILE: config.org
#+OPTIONS: H:3

* Conceptos básicos
** ¿Qué es el control de versiones? 

*** 
:PROPERTIES:
:beamer_opt: plain
:END:
#+ATTR_LATEX: :width 0.9\paperwidth
[[file:figs/phdcomic_finaldoc_1.png]]

[[http://phdcomics.com/comics/archive.php?comicid=1531]]

*** 
:PROPERTIES:
:beamer_opt: plain
:END:
#+ATTR_LATEX: :width 0.9\paperwidth
[[file:figs/phdcomic_finaldoc_2.png]]

[[http://phdcomics.com/comics/archive.php?comicid=1531]]

*** 
:PROPERTIES:
:beamer_opt: plain
:END:
#+ATTR_LATEX: :width 0.9\paperwidth
[[file:figs/phdcomic_finaldoc_3.png]]

[[http://phdcomics.com/comics/archive.php?comicid=1531]]

*** ¿Qué es el control de versiones y por qué debería importarte?

#+begin_quote
El control de versiones es un sistema que *registra los cambios*
realizados sobre un archivo o conjunto de archivos a lo largo del
tiempo, de modo que se puedan *recuperar* versiones específicas más
adelante.[fn:1]
#+end_quote

*** ¿Qué es el control de versiones y por qué debería importarte?

#+begin_quote
El control de versiones es el cuaderno de laboratorio en el
mundo digital. 

Es lo que los profesionales usan para realizar un
*seguimiento* de lo que han hecho y para *colaborar* con otras
personas. 

*No sirve sólo para software*: libros, documentos, pequeños
conjuntos de datos y cualquier cosa que cambie con el tiempo o que
deba compartirse puede y debe almacenarse en un sistema de control de
versiones.[fn:2]
#+end_quote

*** Viajar en el tiempo
- Nada que haya sido sometido a un control de versiones se pierde jamás (/salvo que realmente quieras eliminarlo.../)
- *Todas* las versiones antiguas de un fichero se almacenan: un fichero se puede revertir a un estado anterior sin límites.
*** ¿Qué? ¿Cuándo? ¿Quién?

Un sistema de control de versiones registra:
- El detalle de los cambios realizados.
- La fecha y hora en la que fueron realizados.
- La persona que los realizó.

*** Trabajo Colaborativo

- Cuando un equipo de personas trabaja conjuntamente en un proyecto, es posible que se produzcan cambios incompatibles en un mismo fichero.
- El sistema de control de versiones *impide* cambios simultáneos en un fichero. A cambio, permite la *resolución de conflictos* y los documenta.

** ¿Qué son Git y GitHub?  

*** Git es un Sistema de Control de Versiones

Git es una herramienta software (accesible mediante línea de comandos con =git=) que implementa un Sistema de Control de Versiones.

[[file:figs/git_model.png]]

*** Git es un Sistema de Control de Versiones

Cada vez que se ejecuta un cambio en una estructura de ficheros controlada con Git, realiza una "foto" del estado de los archivos en ese momento, y guarda una referencia a esa instantánea. 
[[file:figs/git_model.png]]

*** Git es un Sistema de Control de Versiones

Por eficiencia, Git no almacena los archivos sin modificaciones sino un enlace al archivo anterior idéntico que ya está almacenado

[[file:figs/git_model.png]]

*** Los estados de Git
- El desarrollador incorpora uno o varios ficheros al control de versiones. (/tracked/)
- Realiza modificaciones en los ficheros (/modified/).
- Incorpora esos ficheros modificados al área de preparación (/staged/).
- Finalmente, confirma todos los cambios del área de preparación: se realiza la instantánea de los ficheros. (/committed/) 
#+ATTR_LATEX: :height 0.4\textheight
[[file:figs/git_estados.png]]

*** ¿Qué es GitHub?

- GitHub es la plataforma de alojamiento de código más importante a nivel mundial.
- Emplea el sistema de control de versiones =git=
- Ofrece una amplia variedad de funcionalidades
  - Alojamiento de código
  - Revisión de código
  - Trabajo colaborativo
  - Publicación de páginas web

* Uso de =git= y =GitHub=

** Primeros Pasos
*** COMMENT Guías para principiantes

https://help.github.com/desktop/guides/

*** Creación de una cuenta en GitHub

[[https://github.com/join]]

[[file:figs/GitHub_Join.png]]

Más información en [[https://help.github.com/articles/signing-up-for-a-new-github-account/][New GitHub account]]

*** Instalación de GitHub Desktop
https://desktop.github.com/

[[file:figs/GitHub_Desktop.png]]

*** Conectamos Git, GitHub y GitHub Desktop
- Una vez instalado comienza el proceso de autenticación, usando las credenciales del paso anterior[fn:3]. 

#+BEGIN_CENTER
\boxed{File > Options > Accounts > Sign\ In}
#+END_CENTER


- A continuación, conectamos la información de usuario con Git[fn:4]. 

#+BEGIN_CENTER
\boxed{File > Options > Git}
#+END_CENTER


*** Nuevo repositorio desde github.com
https://github.com/new

[[file:figs/GitHub_New_Repository.png]]

*** Nuevo repositorio desde GitHub Desktop

#+BEGIN_CENTER
\boxed{File > New\ Repository}
#+END_CENTER

#+ATTR_LATEX: :height 0.8\textheight
[[file:figs/Desktop_NewRepository.png]]

*** Clonar un repositorio remoto

Si hemos creado el repositorio desde github.com (/repositorio remoto/), hay que clonarlo (/copia local/).

#+BEGIN_CENTER
\boxed{File > Clone\ Repository}
#+END_CENTER

#+ATTR_LATEX: :height 0.7\textheight
[[file:figs/Desktop_CloneRepository.png]]

*** Publicar un repositorio local

Si hemos creado el repositorio desde GitHub Desktop (/repositorio local/), hay que publicarlo en github.com (/remoto/)

[[file:figs/Desktop_PublishRepository.png]]

*** Consejos básicos

- Elige bien el =.gitignore= (adecuado al proyecto). Veáse [[https://github.com/github/gitignore]].
- No olvides cumplimentar el =README.md=. Para el formato veáse [[https://help.github.com/articles/basic-writing-and-formatting-syntax/][Formatting syntax]].
- Elige una licencia adecuada a tu proyecto y a tus intereses actuales y futuros. Veáse https://choosealicense.com.


** Flujo de Trabajo

*** Cambios en la copia local

- Modifica los ficheros de la copia local.
- Añade los cambios realizados a la siguiente "instantánea" del repositorio (=git add=) [[file:figs/git_add.png]]
- Confirma los cambios, escribiendo un resumen de lo realizado (=git commit=)
  #+ATTR_LATEX: :height 0.3\textheight
 [[file:figs/git_commit.png]]

*** Histórico de cambios

Los cambios confirmados con =commit= se anotan en la historia (=git log=)

#+begin_center
\boxed{View > History}
#+end_center

[[file:figs/git_history.png]]

*** Publicar cambios al repositorio remoto

- Para sincronizar  los cambios realizados en la copia local con el repositorio remoto hay que publicar mediante =git push=.

#+begin_center
\boxed{Repository > Push}
#+end_center

- A partir de este punto, la copia local y el repositorio remoto están sincronizados.
*** Recibir cambios de un repositorio remoto
Para obtener los cambios recientes que existan en el repositorio y no en la copia local hay que emplear =git pull=, que es la combinación de la secuencia:
1. =git fetch=, para obtener los cambios recientes del repositorio remoto.
2. =git merge=, para combinarlos con la copia local.

#+begin_center
\boxed{Repository > Pull}
#+end_center

* Trabajo en colaboración

** Ramas

*** Rama =master=
[[file:figs/branching.png]]

En un repositorio de GitHub existe una rama (/branch/) que se usa por defecto: *master*.

*** Ramas para facilitar la colaboración
[[file:figs/branching.png]]

****                                                               :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.6
:END:
Cuando hay varias personas trabajando sobre un mismo repositorio, es necesario crear nuevas ramas para evitar conflictos. 

De esta forma, cada persona hace cambios en el código en una rama específica.

****                                                               :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.4
:END:
[[file:figs/nueva_rama_desktop.png]]

*** Combinación de código

[[file:figs/branching.png]]

Cuando los cambios están listos y confirmados (/commit/ + /push/ en la rama específica), se realiza una petición (/pull request/) para combinar estos cambios en la rama *master*.

****                                                               :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.45
:END:
[[file:figs/pull_request_desktop.png]]

****                                                               :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.45
:END:
[[file:figs/pull_request_web.png]]

*** Combinación de código

[[file:figs/branching.png]]


El coordinador del proyecto es el encargado de revisar cada petición y, si todo está correcto, incluir los cambios (/merge/) en la rama *master*. 

[[file:figs/merge_pull_request.png]]

*** Resolución de conflictos

Si no se pueden combinar los cambios automáticamente se produce un conflicto (por ejemplo, cuando dos usuarios modifican un mismo fichero).

[[file:figs/conflict_web.png]]

Un conflicto se debe resolver manualmente.
[[file:figs/resolve_conflict_web.png]]

*** Consejos
- Las ramas accesorias utilizadas se pueden eliminar una vez finalizado el proceso.

- Este proceso se debe repetir tantas veces como sea necesario para realizar cambios de forma colaborativa. 

- *No olvides hacer /pull/ antes de iniciar una nueva interacción con el repositorio*.

**** Más información en:
- Página Web: [[https://guides.github.com/introduction/flow/][Understanding the GitHub Flow]]
- Vídeo: [[https://youtu.be/PBI2Rz-ZOxU][Understanding the GitHub Flow]]


** Persiguiendo a los bichos

*** Issues

Todos los repositorios de GitHub tienen una sección denominada "Issues"[fn:8] a modo de /bug tracker/.

Pueden usarse para seguimiento de fallos, mejoras, tareas, etc.

[[file:figs/github_issues.png]]

*** Estructura de una issue

Una issue es un tablero de discusión en el que pueden participar los responsables del repositorio y cualquier usuario de GitHub.

*Debe* contener un título y una descripción.

*Puede* contener etiquetas, metas, y responsables.

[[file:figs/github_issue_example.png]]

*** Contenido de una issue

- En la descripción de una issue se debe suministrar toda la información posible para el responsable del repositorio, *incluyendo un ejemplo mínimo, completo y verificable*[fn:12]. 

- El contenido será formateado como Markdown (incluye un /preview/)[fn:11]. 

- Se pueden incluir referencias al código y a otras issues[fn:10].


** Herramientas gráficas para el análisis de un repositorio

*** Insights 

Toda la actividad realizada en un repositorio puede verse de manera gráfica a través del botón /Insights/ en la web del repositorio en GitHub[fn:5]. Por ejemplo,

- Contribución de los integrantes del equipo
- Estructuras de ramas de un repositorio
- Histórico de cambios en un repositorio

*** Contribución de los integrantes del equipo

[[file:figs/repo_contributors_specific_graph.png]]

*** Estructura de ramas de un repositorio

[[file:figs/repo_network_graph.png]]

*** Cambios en un repositorio

[[file:figs/repo_code_frequency_graph_dotcom.png]]

* Publicación de páginas web en GitHub

*** Página web de usuario u organización

1. Crea un repositorio nuevo con el nombre =<username>.github.io=[fn:6].
2. Sube (=commit= + =push=) un fichero =index.html= a la rama =master= con código HTML.
3. Con un navegador ve a la dirección [[https://<username>.github.io]]

#+begin_src html
<!DOCTYPE HTML>
<html>
	<head>
		<title>Hello World</title>
	</head>
	<body>
		Hello World!
	</body>
</html>
#+end_src

*** Página web de proyecto

**** Si no sabes HTML

- En la página del repositorio:

#+begin_center
\boxed{Settings > GitHub\ Pages > Source > master\ branch}

\boxed{Settings > GitHub\ Pages > Theme\ Chooser}
#+end_center

- Modifica el fichero =README.md=[fn:7] (=commit= + =push=).

- Con un navegador ve a la dirección [[https://<username>.github.io/<repository>]]

*** Página web de proyecto

**** Si sabes HTML

- Crea una carpeta =docs= en la rama =master= del repositorio.

- En esta carpeta =docs= crea/modifica un fichero =index.html= (=commit= + =push=).

- En la página del repositorio:

#+begin_center
\boxed{Settings > GitHub\ Pages > Source > docs\ folder}
#+end_center

- Con un navegador ve a la dirección [[https://<username>.github.io/<repository>]]


* COMMENT GitHub Classroom
https://github.blog/2018-03-06-how-to-use-group-assignments-in-github-classroom/

https://classroom.github.com/assistant

https://github.blog/2018-08-22-merge-conflicts-in-the-classroom/

* Footnotes

[fn:12]https://stackoverflow.com/help/mcve 

[fn:11]Veáse la guía [[https://help.github.com/articles/basic-writing-and-formatting-syntax/][Basic Writing and Formatting syntax]]. 

[fn:10]Veáse la guía [[https://help.github.com/articles/autolinked-references-and-urls/][Autolinked references and urls]]. 

[fn:8]https://guides.github.com/features/issues/ 

[fn:7] Más información sobre formato Markdown https://guides.github.com/features/mastering-markdown/. 

[fn:6] Siendo =<username>= tu nombre de usuario en GitHub. 

[fn:5] Más detalles en [[https://help.github.com/categories/visualizing-repository-data-with-graphs/][Ver información del repositorio de forma gráfica]]. 

[fn:4] Más información en [[https://help.github.com/desktop/guides/getting-started-with-github-desktop/configuring-git-for-github-desktop/][Configuring Git]].

[fn:3] Más información en [[https://help.github.com/desktop/guides/getting-started-with-github-desktop/authenticating-to-github/][Authenticating to GitHub]].

[fn:2]https://swcarpentry.github.io/git-novice/ 

[fn:1]https://git-scm.com/book/es/v1/Empezando-Acerca-del-control-de-versiones 
