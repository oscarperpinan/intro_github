#+TITLE: Introducción al control de versiones y trabajo colaborativo con GitHub
#+AUTHOR: Oscar Perpiñán Lamigueiro
#+DATE:
#+STARTUP: beamer
#+STARTUP: indent
#+SETUPFILE: config.org
#+OPTIONS: H:3

* Conceptos básicos
** ¿Qué es el control de versiones? 

*** 
:PROPERTIES:
:beamer_opt: plain
:END:
#+ATTR_LATEX: :width 0.9\paperwidth
[[file:figs/phdcomic_finaldoc_1.png]]

[[http://phdcomics.com/comics/archive.php?comicid=1531]]

*** 
:PROPERTIES:
:beamer_opt: plain
:END:
#+ATTR_LATEX: :width 0.9\paperwidth
[[file:figs/phdcomic_finaldoc_2.png]]

[[http://phdcomics.com/comics/archive.php?comicid=1531]]

*** 
:PROPERTIES:
:beamer_opt: plain
:END:
#+ATTR_LATEX: :width 0.9\paperwidth
[[file:figs/phdcomic_finaldoc_3.png]]

[[http://phdcomics.com/comics/archive.php?comicid=1531]]

*** ¿Qué es el control de versiones y por qué debería importarte?

#+begin_quote
El control de versiones es un sistema que *registra los cambios*
realizados sobre un archivo o conjunto de archivos a lo largo del
tiempo, de modo que se puedan *recuperar* versiones específicas más
adelante.[fn:1]
#+end_quote

*** ¿Qué es el control de versiones y por qué debería importarte?

#+begin_quote
El control de versiones es el cuaderno de laboratorio en el
mundo digital. Es lo que los profesionales usan para realizar un
*seguimiento* de lo que han hecho y para *colaborar* con otras
personas. Cada gran proyecto de desarrollo de software se basa en
ello, y la mayoría de los programadores lo utilizan para sus
trabajos. Y *no sirve sólo para software*: libros, documentos, pequeños
conjuntos de datos y cualquier cosa que cambie con el tiempo o que
deba compartirse puede y debe almacenarse en un sistema de control de
versiones.[fn:2]
#+end_quote

*** Viajar en el tiempo
- Nada que haya sido sometido a un control de versiones se pierde jamás (/salvo que realmente quieras eliminarlo.../)
- *Todas* las versiones antiguas de un fichero se almacenan: un fichero se puede revertir a un estado anterior sin límites.
*** ¿Qué? ¿Cuándo? ¿Quién?

Un sistema de control de versiones registra:
- El detalle de los cambios realizados.
- La fecha y hora en la que fueron realizados.
- La persona que los realizó.

*** Trabajo Colaborativo

- Cuando un equipo de personas trabaja conjuntamente en un proyecto, es posible que se produzcan cambios incompatibles en un mismo fichero.
- El sistema de control de versiones *impide* cambios simultáneos en un fichero. A cambio, permite la *resolución de conflictos* y los documenta.

** ¿Qué son Git y GitHub?  

*** Git es un Sistema de Control de Versiones

Git es una herramienta software (accesible mediante línea de comandos con =git=) que implementa un Sistema de Control de Versiones.

[[file:figs/git_model.png]]

*** Git es un Sistema de Control de Versiones

Cada vez que se ejecuta un cambio en una estructura de ficheros controlada con Git, realiza una "foto" del estado de los archivos en ese momento, y guarda una referencia a esa instantánea. 
[[file:figs/git_model.png]]

*** Git es un Sistema de Control de Versiones

Por eficiencia, Git no almacena los archivos sin modificaciones sino un enlace al archivo anterior idéntico que ya está almacenado

[[file:figs/git_model.png]]

*** Los estados de Git
- El desarrollador incorpora uno o varios ficheros al control de versiones. (/tracked/)
- Realiza modificaciones en los ficheros (/modified/).
- Incorpora esos ficheros modificados al área de preparación (/staged/).
- Finalmente, confirma todos los cambios del área de preparación: se realiza la instantánea de los ficheros. (/committed/) 
#+ATTR_LATEX: :height 0.4\textheight
[[file:figs/git_estados.png]]

*** ¿Qué es GitHub?

- GitHub es la plataforma de alojamiento de código más importante a nivel mundial.
- Emplea el sistema de control de versiones =git=
- Ofrece una amplia variedad de funcionalidades
  - Alojamiento de código
  - Revisión de código
  - Trabajo colaborativo
  - Publicación de páginas web

* Primeros pasos

*** COMMENT Guías para principiantes

https://help.github.com/desktop/guides/

*** Creación de una cuenta en GitHub

[[https://github.com/join]]

[[file:figs/GitHub_Join.png]]

Más información en [[https://help.github.com/articles/signing-up-for-a-new-github-account/][New GitHub account]]

*** Instalación de GitHub Desktop
https://desktop.github.com/

[[file:figs/GitHub_Desktop.png]]

*** Conectamos Git, GitHub y GitHub Desktop
- Una vez instalado comienza el proceso de autenticación, usando las credenciales del paso anterior[fn:3]. 

#+BEGIN_CENTER
\boxed{File > Options > Accounts > Sign\ In}
#+END_CENTER


- A continuación, conectamos la información de usuario con Git[fn:4]. 

#+BEGIN_CENTER
\boxed{File > Options > Git}
#+END_CENTER


*** Nuevo repositorio desde github.com
https://github.com/new

[[file:figs/GitHub_New_Repository.png]]

*** Nuevo repositorio desde GitHub Desktop

#+BEGIN_CENTER
\boxed{File > New\ Repository}
#+END_CENTER

#+ATTR_LATEX: :height 0.8\textheight
[[file:figs/Desktop_NewRepository.png]]

*** Clonar un repositorio remoto

Si hemos creado el repositorio desde github.com (/repositorio remoto/), hay que clonarlo (/copia local/).

#+BEGIN_CENTER
\boxed{File > Clone\ Repository}
#+END_CENTER

#+ATTR_LATEX: :height 0.7\textheight
[[file:figs/Desktop_CloneRepository.png]]

*** Publicar un repositorio local

Si hemos creado el repositorio desde GitHub Desktop (/repositorio local/), hay que publicarlo en github.com (/remoto/)

[[file:figs/Desktop_PublishRepository.png]]

*** Consejos básicos

- Elige bien el =.gitignore= (adecuado al proyecto). Veáse [[https://github.com/github/gitignore]].
- No olvides cumplimentar el =README.md=. Para el formato veáse [[https://help.github.com/articles/basic-writing-and-formatting-syntax/][Formatting syntax]].
- Elige una licencia adecuada a tu proyecto y a tus intereses actuales y futuros. Veáse https://choosealicense.com.

* Flujo de trabajo con =git= y =GitHub=
** Realizar y confirmar cambios (=add= y =commit=)
** Publicar cambios (=push=)
** Recibir cambios de un repositorio remoto y combinar con una copia local (=fetch=, =merge= y =pull=)
* Trabajo en colaboración
Este flujo de trabajo está descrito en:  
- Página Web: [[https://guides.github.com/introduction/flow/][Understanding the GitHub Flow]]
- Vídeo: [[https://youtu.be/PBI2Rz-ZOxU][Understanding the GitHub Flow]]


** Ramas

*** Rama =master=
[[file:figs/branching.png]]

En un repositorio de GitHub existe una rama (/branch/) que se usa por defecto: *master*.

*** Ramas para facilitar la colaboración
[[file:figs/branching.png]]

****                                                               :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.6
:END:
Cuando hay varias personas trabajando sobre un mismo repositorio, es necesario crear nuevas ramas para evitar conflictos. De esta forma, cada persona hace cambios en el código en una rama específica.

****                                                               :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.4
:END:
[[file:figs/nueva_rama_desktop.png]]

*** Combinación de código

[[file:figs/branching.png]]

Cuando los cambios están listos y confirmados (/commit/ + /push/ en la rama específica), se realiza una petición (/pull request/) para combinar estos cambios en la rama *master*.

****                                                               :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.45
:END:
[[file:figs/pull_request_desktop.png]]

****                                                               :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.45
:END:
[[file:figs/pull_request_web.png]]

*** Combinación de código

[[file:figs/branching.png]]


El coordinador del proyecto es el encargado de revisar cada petición y, si todo está correcto, incluir los cambios (/merge/) en la rama *master*. 

[[file:figs/merge_pull_request.png]]

*** Resolución de conflictos

Si no se pueden combinar los cambios automáticamente se produce un conflicto (por ejemplo, cuando dos usuarios modifican un mismo fichero).

[[file:figs/conflict_web.png]]

Un conflicto se debe resolver manualmente.
[[file:figs/resolve_conflict_web.png]]

*** Consejos
- Las ramas accesorias utilizadas se pueden eliminar una vez finalizado el proceso.

- Este proceso se debe repetir tantas veces como sea necesario para realizar cambios de forma colaborativa. 

- *No olvides hacer /pull/ antes de iniciar una nueva interacción con el repositorio*.

** Tareas y tableros de discusión (=issues=)
** Herramientas gráficas para el análisis de un repositorio
Toda la actividad realizada en un repositorio puede verse de manera gráfica a través del botón /Insights/ en la web del repositorio en GitHub: [[https://help.github.com/categories/visualizing-repository-data-with-graphs/][Ver información del repositorio de forma gráfica]]. 

*** Contribución de los integrantes del equipo

[[file:figs/repo_contributors_specific_graph.png]]

*** Estructura de ramas

[[file:figs/repo_network_graph.png]]

*** Cambios en un repositorio

[[file:figs/repo_code_frequency_graph_dotcom.png]]

* GitHub Classroom
* Publicación de páginas web en GitHub

* Footnotes

[fn:4] Más información en [[https://help.github.com/desktop/guides/getting-started-with-github-desktop/configuring-git-for-github-desktop/][Configuring Git]].

[fn:3] Más información en [[https://help.github.com/desktop/guides/getting-started-with-github-desktop/authenticating-to-github/][Authenticating to GitHub]].

[fn:2]https://swcarpentry.github.io/git-novice/ 

[fn:1]https://git-scm.com/book/es/v1/Empezando-Acerca-del-control-de-versiones 
