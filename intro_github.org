#+TITLE: Introducción al control de versiones y trabajo colaborativo con GitHub
#+AUTHOR: Oscar Perpiñán Lamigueiro
#+DATE:
#+STARTUP: beamer
#+STARTUP: indent
#+SETUPFILE: config.org
#+OPTIONS: H:3

*** AIGORA

Lo expuesto en este documento se enmarca en el proyecto de innovación educativa AIGORA (Aprendizaje de Informática con Github Organizado en Repositorios Abiertos).

#+ATTR_LATEX: :height 0.5\textheight
[[file:figs/aigora.png]]

https://innovacioneducativa.upm.es/proyectosIE/informacion?anyo=2018-2019&id=2840

* Conceptos básicos
** ¿Qué es el control de versiones? 

*** 
:PROPERTIES:
:beamer_opt: plain
:END:
#+ATTR_LATEX: :width 0.9\paperwidth
[[file:figs/phdcomic_finaldoc_1.png]]

[[http://phdcomics.com/comics/archive.php?comicid=1531]]

*** 
:PROPERTIES:
:beamer_opt: plain
:END:
#+ATTR_LATEX: :width 0.9\paperwidth
[[file:figs/phdcomic_finaldoc_2.png]]

[[http://phdcomics.com/comics/archive.php?comicid=1531]]

*** 
:PROPERTIES:
:beamer_opt: plain
:END:
#+ATTR_LATEX: :width 0.9\paperwidth
[[file:figs/phdcomic_finaldoc_3.png]]

[[http://phdcomics.com/comics/archive.php?comicid=1531]]

*** ¿Qué es el control de versiones y por qué debería importarte?

#+begin_quote
El control de versiones es un sistema que *registra los cambios*
realizados sobre un archivo o conjunto de archivos a lo largo del
tiempo, de modo que se puedan *recuperar* versiones específicas más
adelante.[fn:1]
#+end_quote
**** Viajar en el tiempo
- Nada que haya sido sometido a un control de versiones se pierde jamás (/salvo que realmente quieras eliminarlo.../)
- *Todas* las versiones antiguas de un fichero se almacenan: un fichero se puede revertir a un estado anterior sin límites.
*** ¿Qué es el control de versiones y por qué debería importarte?

#+begin_quote
El control de versiones es el *cuaderno de laboratorio* en el mundo digital. Es lo que los profesionales usan para realizar un
*seguimiento* de lo que han hecho y para *colaborar* con otras
personas.[fn:2]
#+end_quote


**** ¿Qué? ¿Cuándo? ¿Quién?

Un sistema de control de versiones registra:
- El detalle de los cambios realizados.
- La fecha y hora en la que fueron realizados.
- La persona que los realizó.

*** ¿Qué es el control de versiones y por qué debería importarte?

#+begin_quote
El control de versiones es el *cuaderno de laboratorio* en el mundo digital. Es lo que los profesionales usan para realizar un
*seguimiento* de lo que han hecho y para *colaborar* con otras
personas.[fn:2]
#+end_quote

**** Trabajo Colaborativo
- Cuando un equipo de personas trabaja conjuntamente en un proyecto, es posible que se produzcan cambios incompatibles en un mismo fichero.
- El sistema de control de versiones *impide* cambios simultáneos en un fichero. A cambio, permite la *resolución de conflictos* y los documenta.

*** ¿Qué es el control de versiones y por qué debería importarte?

#+begin_quote
*No sirve sólo para software*: libros, documentos, pequeños conjuntos
de datos y cualquier cosa que cambie con el tiempo o que deba
compartirse puede y debe almacenarse en un sistema de control de
versiones.[fn:2]
#+end_quote

** ¿Qué son Git y GitHub?  

*** Git es un Sistema de Control de Versiones

Git es una herramienta software (accesible mediante línea de comandos con =git=) que implementa un Sistema de Control de Versiones.

[[file:figs/git_model.png]]

*** Git es un Sistema de Control de Versiones

Cada vez que se ejecuta un cambio en una estructura de ficheros controlada con Git, realiza una "foto" del estado de los archivos en ese momento, y guarda una referencia a esa instantánea. 
[[file:figs/git_model.png]]

*** Git es un Sistema de Control de Versiones

Por eficiencia, Git no almacena los archivos sin modificaciones sino un enlace al archivo anterior idéntico que ya está almacenado

[[file:figs/git_model.png]]

*** Los estados de Git
- El desarrollador incorpora uno o varios ficheros al control de versiones. (/tracked/)
- Realiza modificaciones en los ficheros (/modified/).
- Incorpora esos ficheros modificados al área de preparación (/staged/).
- Finalmente, confirma todos los cambios del área de preparación: se realiza la instantánea de los ficheros. (/committed/) 
#+ATTR_LATEX: :height 0.4\textheight
[[file:figs/git_estados.png]]

*** ¿Qué es GitHub?

- GitHub es la plataforma de alojamiento de código más importante a nivel mundial.
- Emplea el sistema de control de versiones =git=
- Ofrece una amplia variedad de funcionalidades
  - Alojamiento de código
  - Revisión de código
  - Trabajo colaborativo
  - Publicación de páginas web

* Uso de =git= y =GitHub=

** Primeros Pasos
*** Itinerario


1. Abriremos una cuenta en GitHub[fn:16].
2. Instalaremos GitHub Desktop.
3. Configuraremos GitHub Desktop para conectarlo con la cuenta de GitHub.

*** Creación de una cuenta en GitHub

[[https://github.com/join]]

[[file:figs/GitHub_Join.png]]

Más información en [[https://help.github.com/articles/signing-up-for-a-new-github-account/][New GitHub account]]

*** Instalación de GitHub Desktop
https://desktop.github.com/

[[file:figs/GitHub_Desktop.png]]

*** Conectamos Git, GitHub y GitHub Desktop
- Una vez instalado comienza el proceso de autenticación, usando las credenciales del paso anterior[fn:3]. 

#+BEGIN_CENTER
\boxed{File > Options > Accounts > Sign\ In}
#+END_CENTER


- A continuación, conectamos la información de usuario con Git[fn:4]. 

#+BEGIN_CENTER
\boxed{File > Options > Git}
#+END_CENTER

*** =git= en línea de comandos

- =git= tiene un elevado número de funcionalidades. Sólo algunas están implementadas en GitHub Desktop.
- Para poder acceder al conjunto completo es necesario instalar =git= y utilizar línea de comandos:
  - [[https://gitforwindows.org/][Git for Windows]]
  - [[http://git-scm.com/download/linux][Git for Linux]]
  - [[http://git-scm.com/download/mac][Git for Mac]]

** Creación y sincronización de repositorios

*** Remoto y Local

- *Github.com* aloja los *repositorios remotos* (/nube/).
- En tu ordenador trabajas con una *copia local* del repositorio. Otros desarrolladores tendrán sus propias copias locales.
- La(s) copia(s) local(es) y el repositorio remoto deben estar *sincronizados* mediante diferentes comandos de =git=.
*** Decisiones al crear un repositorio

- *Portada*
  
  Debes inicializar y cumplimentar el fichero *=README.md=*. Para el formato veáse [[https://help.github.com/articles/basic-writing-and-formatting-syntax/][Formatting syntax]].

- *Licencia*
  
  Elige una adecuada a tu proyecto y a tus intereses actuales y futuros. Veáse https://choosealicense.com.

- *Ficheros ignorados*
  
  Elige un *=.gitignore=* adecuado al proyecto: Veáse [[https://github.com/github/gitignore]].

*** Método 1: de remoto a local
**** Itinerario 
1. Crearemos un nuevo repositorio *remoto*.
2. Clonaremos este repositorio para tener una copia local.

*** Método 1: de remoto a local

Abrimos un nuevo repositorio /remoto/: https://github.com/new

[[file:figs/GitHub_New_Repository.png]]

*** Método 1: de remoto a local

Clonamos el /repositorio remoto/ para poder trabajar con él (/copia local/).

#+BEGIN_CENTER
\boxed{File > Clone\ Repository}
#+END_CENTER

#+ATTR_LATEX: :height 0.65\textheight
[[file:figs/Desktop_CloneRepository.png]]

*** Método 2: de local a remoto
**** Itinerario
1. Crearemos un nuevo repositorio *local*.
2. Lo publicaremos en remoto para que sea accesible desde otros equipos.

*** Método 2: de local a remoto

Abrimos un nuevo repositorio /local/ desde GitHub Desktop

#+BEGIN_CENTER
\boxed{File > New\ Repository}
#+END_CENTER

#+ATTR_LATEX: :height 0.7\textheight
[[file:figs/Desktop_NewRepository.png]]

*** Método 2: de local a remoto

Publicamos el /repositorio local/ github.com (/repositorio remoto/) para que otros puedan verlo y trabajar con él.

[[file:figs/Desktop_PublishRepository.png]]


** Flujo de Trabajo
*** 
[[file:figs/git_estados.png]]

*** Cambios en la copia local
#+ATTR_LATEX: :height 0.4\textheight
file:figs/git_estados.png

En la carpeta que contiene la copia local, haz *modificaciones* en los ficheros (empleando tu editor de código/texto preferido).

*** Cambios en la copia local
#+ATTR_LATEX: :height 0.4\textheight
file:figs/git_estados.png

*Añade los cambios* realizados a la siguiente "instantánea" del repositorio (=git add=) [[file:figs/git_add.png]]
*** Cambios en la copia local
#+ATTR_LATEX: :height 0.4\textheight
file:figs/git_estados.png

*Confirma* los cambios, escribiendo un resumen de lo realizado (=git commit=)
  #+ATTR_LATEX: :height 0.3\textheight
 [[file:figs/git_commit.png]]
*** Consejos para =commit=

- /Commit early and often/: cada =commit= debe incluir cambios pequeños y coherentes.

- Escribir un mensaje de calidad al ejecutar cambios facilita tanto el trabajo personal como la colaboración en equipo con Git.[fn:9]

- El *título* debe ser *conciso* (50 caracteres) y escrito en imperativo (/Do something.../)

- El *cuerpo* debe explicar *el qué y el por qué del cambio*, no el cómo, comparando con el comportamiento anterior al cambio.

- Se pueden incluir referencias a /issues/ (ver a continuación) con #XX siendo XX el número de la /issue/.
*** Histórico de cambios

Los cambios confirmados con =commit= se anotan en la historia (=git log=)

#+begin_center
\boxed{View > History}
#+end_center

[[file:figs/git_history.png]]


*** Publicar cambios al repositorio remoto

- Para sincronizar  los cambios realizados *desde la copia local hasta el repositorio remoto* hay que publicar mediante =git push=.

#+begin_center
\boxed{Repository > Push}
#+end_center

- A partir de este punto, la copia local y el repositorio remoto están sincronizados.


*** Recibir cambios de un repositorio remoto
Para obtener en la copia local los cambios recientes que existan en el repositorio hay que emplear =git pull=, que es la combinación de la secuencia:
1. =git fetch=, para obtener los cambios recientes del repositorio remoto.
2. =git merge=, para combinarlos con la copia local.

#+begin_center
\boxed{Repository > Pull}
#+end_center
**** Importante
En el caso de *repositorios compartidos*, antes de un =git push= es imprescindible actualizar la copia local incorporando los cambios del repositorio con =git pull=.
*** Resumen

1. Realiza modificaciones en los ficheros de la copia local.
2. *COMMIT* :: Confirma los cambios con un mensaje informativo.
3. *PULL* :: Incorpora los cambios del repositorio remoto a la copia local.
4. *PUSH* :: Publica los cambios de la copia local al repositorio remoto.
** Recuperación de cambios
*** Recordatorio
#+begin_quote
El control de versiones es un sistema que *registra los cambios*
realizados sobre un archivo o conjunto de archivos a lo largo del
tiempo, de modo que se puedan *recuperar* versiones específicas más
adelante.
#+end_quote
**** Viajar en el tiempo
- Nada que haya sido sometido a un control de versiones se pierde jamás (/salvo que realmente quieras eliminarlo.../)
- *Todas* las versiones antiguas de un fichero se almacenan: un fichero se puede revertir a un estado anterior sin límites.
*** =git revert=

- Con =git revert= podemos revertir *todos* los cambios realizados en un determinado =commit=.
- Al hacer uso de este comando no se elimina el =commit= de la historia.
- Es más, se genera un *nuevo commit*, que se añade a la historia de cambios, y que debe ser sincronizado con el repositorio.
- *GitHub Desktop*
  - Se elige el =commit= que se quiere revertir.
  - Al pulsar botón derecho, en el menú contextual se elige /Revert changes in this commit/.

*** =git checkout= 
- Con =git checkout= también se pueden deshacer cambios, y se puede elegir restringirlos a un fichero determinado.
- Esta funcionalidad de =git= no está disponible en GitHub Desktop.
- Con línea de comandos se consigue a través de =git checkout=[fn:14].
*** Ejemplos
- Recuperar el fichero =filename= del último =commit= (es decir, descartar cambios que aún no han sido confirmados):
  #+BEGIN_SRC sh
  git checkout HEAD filename
  #+END_SRC  

- Recuperar el fichero =filename= de un =commit= más antiguo:
  #+BEGIN_SRC sh
  #Visitar la historia de cambios
  git log --oneline
  #Recuperar el commit a través del hash
  git checkout 55df4c2 -- filename
  #O el cambio anterior a este commit
  git checkout 55df4c2~1 -- filename
  #+END_SRC  

- Después de =checkout= hay que aplicar cambios y sincronizar
  #+BEGIN_SRC sh
  git commit -m "Mensaje..."
  git push
  #+END_SRC   
* Trabajo en colaboración
** Ramas

*** Rama =master=
[[file:figs/branching.png]]

En un repositorio de GitHub existe una rama (/branch/) que se usa por defecto: *master*[fn:13].

*** Ramas para facilitar la colaboración
[[file:figs/branching.png]]

Cuando hay varias personas trabajando sobre un mismo repositorio, es necesario crear nuevas ramas para evitar conflictos. 

De esta forma, cada persona implementa *cambios* en una *rama determinada* de forma paralela al resto del equipo.

*** Crear una nueva rama

- En menú: \boxed{Branch > New\ branch...}

- O en pantalla principal: \boxed{Current\ branch> Branches > New\ branch}

#+ATTR_LATEX: :height 0.5\textheight
[[file:figs/nueva_rama_desktop.png]]


La nueva rama puede tener como origen la rama =master= u otra rama existente.

*** Combinación de código
#+ATTR_LATEX: :height 0.3\textheight
[[file:figs/branching.png]]

Cuando los cambios están listos y confirmados (/commit/ + /push/ en la rama específica), se realiza una petición (/pull request/) para combinar estos cambios en la rama *master*.

****                                                               :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.45
:BEAMER_opt: [t]
:END:
[[file:figs/pull_request_desktop.png]]

****                                                               :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.45
:BEAMER_opt: [t]
:END:
[[file:figs/pull_request_web.png]]

*** Combinación de código
#+ATTR_LATEX: :height 0.3\textheight
[[file:figs/branching.png]]


El coordinador del proyecto es el encargado de revisar cada petición y, si todo está correcto, incluir los cambios (/merge/) en la rama *master*. 

[[file:figs/merge_pull_request.png]]

*** Resolución de conflictos

Si no se pueden combinar los cambios automáticamente se produce un conflicto (ejemplo: dos usuarios modifican un mismo fichero).
#+ATTR_LATEX: :height 0.3\textheight
[[file:figs/conflict_web.png]]

Un conflicto se debe resolver manualmente.
[[file:figs/resolve_conflict_web.png]]

Lectura recomendada: [[https://github.blog/2018-08-22-merge-conflicts-in-the-classroom/][Merge Conflicts in the Classroom]]
*** Consejos

- *No olvides hacer /pull/ antes de iniciar una nueva interacción con el repositorio*.

- Recuerda las recomendaciones sobre un buen mensaje de =git commit=.

- *Organización previa*: las *tareas* asignadas a un rama deben ser *independientes* de las otras ramas para evitar conflictos.

- Cuando el trabajo en una rama ha concluido, hay que *combinar cambios con master lo antes posible* para reducir la posibilidad de conflicto. Las ramas accesorias utilizadas se pueden eliminar una vez finalizado el proceso.

- Este proceso se debe repetir tantas veces como sea necesario para realizar cambios de forma colaborativa. 
*** 
**** Ejercicio 1
Crea una nueva rama en tu repositorio. En esta rama crea un nuevo fichero de texto y añade contenido en él. Sincroniza con el repositorio. Vuelve a la rama =master= y comprueba que este fichero nuevo no está presente. Combina ambas ramas.

**** Ejercicio 2

Vuelve a la rama nueva y modifica un fichero. Vuelve a la rama =master= y modifica el mismo fichero. Combina ambas ramas y resuelve los conflictos.
** Persiguiendo a los bichos

*** Issues

Todos los repositorios de GitHub tienen una sección denominada "Issues"[fn:8] a modo de /bug tracker/.

Pueden usarse para seguimiento de fallos, mejoras, tareas, etc.

[[file:figs/github_issues.png]]

*** Estructura de una issue

Una issue es un tablero de discusión en el que pueden participar los responsables del repositorio y cualquier usuario de GitHub.

*Debe* contener un título y una descripción.

*Puede* contener etiquetas, metas, y responsables.

[[file:figs/github_issue_example.png]]

*** Contenido de una issue

- En la descripción de una issue se debe suministrar toda la información posible para el responsable del repositorio, *incluyendo un ejemplo mínimo, completo y verificable*[fn:12]. 

- El contenido será formateado como Markdown (incluye un /preview/)[fn:11]. 

- Se pueden incluir referencias al código y a otras issues[fn:10].

*** 
**** Ejercicio

- Abre nuevas =issues= en tu propio repositorio, o en repositorios ajenos (por ejemplo, https://github.com/oscarperpinan/prueba_github).

- Responde y cierra =issues= de otros usuarios en tu propio repositorio.

** Herramientas gráficas para el análisis de un repositorio

*** Insights 

Toda la actividad realizada en un repositorio puede verse de manera gráfica a través del botón /Insights/ en la web del repositorio en GitHub[fn:5]. Por ejemplo,

- Contribución de los integrantes del equipo
- Estructuras de ramas de un repositorio
- Histórico de cambios en un repositorio

*** Contribución de los integrantes del equipo

[[file:figs/repo_contributors_specific_graph.png]]

*** Estructura de ramas de un repositorio

[[file:figs/repo_network_graph.png]]

*** Cambios en un repositorio

[[file:figs/repo_code_frequency_graph_dotcom.png]]

*** 

**** Ejercicio

Visita la sección Insights de los repositorios del proyecto AIGORA (https://github.com/aigora). 

Por ejemplo: https://github.com/aigora/twIE_2021-chkr_s-l/pulse

* GitHub Classroom

*** ¿Qué es GitHub Classroom?

- Es un asistente para configurar grupos y asignar tareas en GitHub.

- Accesible en: https://classroom.github.com/

- Es recomendable [[https://help.github.com/en/articles/applying-for-an-educator-or-researcher-discount][solicitar descuento por cuenta académica]] (repositorios públicos y privados ilimitados, colaboradores ilimitados).


*** GitHub Classroom necesita una Organización

- Para poder trabajar con GitHub Classroom es necesario crear una Organización en Github (grupo de cuentas que tienen acceso compartido a un grupo de repositorios): https://github.com/organizations/new

- Ejemplos 
  
  https://github.com/swcarpentry

  https://github.com/aigora

- Las cuentas tipo =organization= también pueden solicitar el [[https://help.github.com/en/articles/applying-for-an-educator-or-researcher-discount#upgrading-your-organization][descuento por cuenta académica]]. 

*** Dentro de una organización se pueden definir equipos

- Dentro de una =organization= pueden coexistir diferentes equipos (=Team=)

- Se pueden asignar diferentes permisos de acceso y escritura a cada equipo, o a conjuntos de equipos.

- Ejemplo:

  https://github.com/orgs/aigora/teams

- Más información en el [[https://github.blog/2010-06-29-introducing-organizations/][blog de GitHub]].

*** Configuración de aulas 

- Una única cuenta =organization= puede dar cabida a múltiples aulas (=classrooms=): 
  https://classroom.github.com/classrooms/
- Cada =classroom= contiene estudiantes (identificados por su usuario de GitHub y su correo electrónico) y grupos (=teams=).
- Esta correspondencia se puede facilitar mediante el =classroom roster=[fn:15].

*** Asignación de tareas

- Dentro de cada =classroom= se pueden incluir múltiples tareas (=assignments=).
- Un =assignment= puede ser individual o grupal.
- Los grupos se pueden definir antes por el profesor, o por los estudiantes en el momento de aceptar la tarea.


*** Cómo hemos usado GitHub Classroom en AIGORA

**** Configuración General
  - Usamos una =organization= común para todos los grupos de matriculación de una misma asignatura.
  - Definimos un =classroom= para cada grupo de matriculación.
  - En cada =classroom= subimos la lista de correos UPM de los estudiantes de ese grupo de matriculación mediante el =roster management=.
  - Dentro de cada =classroom= definimos diferentes equipos de trabajo (=Teams=) para trabajos grupales.
*** Cómo hemos usado GitHub Classroom en AIGORA

**** Registro de estudiantes

  1. En cada =classroom= creamos una =Group Assignment= denominada "registro estudiantes". Como identificador del "Group" utilizamos el grupo de matriculación. Este identificador queda almacenado en GitHub Classroom para futuros usos, pero *no* crea un =Team= en GitHub.
  2. Abrimos el enlace del assignment con nuestro usuario (podemos hacer =skip= cuando nos pide que enlacemos a algún miembro del =roster=), y *creamos un nuevo Team*, que se debe llamar igual que el grupo de matriculación. Este paso *sí* crea un nuevo =Team= en la organization de Github (útil para asignar permisos grupales).
  3. A continuación enviamos el enlace del =assignment= a los alumnos para que enlacen su usuario de GitHub a su correo incluido en el roster.  *Deben elegir el Team que hemos definido nosotros, sin crear uno nuevo*. A partir de este punto forman parte del =Team= con los permisos y repositorios definidos para el mismo.
*** Cómo hemos usado GitHub Classroom en AIGORA

**** Grupos de Trabajo
  
  1. Para el trabajo en equipo creamos igualmente una =Group Assignment=, pero dejamos libertad a la hora de definir los =Teams=.
  2. El primer estudiante de un grupo de trabajo que acepta este =assignment= define el nombre del =Team=. Los siguientes estudiantes de ese mismo grupo deben seleccionar ese =Team=.
  3. Se pueden definir repositorios plantilla para incluir contenido inicial en todos los repositorios creados para cada =Team=. Ejemplo: https://github.com/aigora/starter-code

* Publicación de páginas web en GitHub

*** Página web de *proyecto*

 [[https://<username>.github.io/<repository>]]

**** Si no sabes HTML

- En la página del repositorio:

#+begin_center
\boxed{Settings > GitHub\ Pages > Source > master\ branch}

\boxed{Settings > GitHub\ Pages > Theme\ Chooser}
#+end_center

- Modifica el fichero =README.md=[fn:7] (=commit= + =push=).

*** Página web de *proyecto*

 [[https://<username>.github.io/<repository>]]

**** Si sabes HTML

- Crea una carpeta =docs= en la rama =master= del repositorio.

- En esta carpeta =docs= crea/modifica un fichero =index.html= (=commit= + =push=).
#+begin_src html
<!DOCTYPE HTML>
<html>
	<head>
		<title>Hello World</title>
	</head>
	<body>
		Hello World!
	</body>
</html>
#+end_src

- En la página del repositorio: \boxed{Settings > GitHub\ Pages > Source > docs\ folder}

*** Ejemplo de web de *proyecto*

- Página web: https://oscarperpinan.github.io/bookvis/
- Repositorio: https://github.com/oscarperpinan/bookvis/tree/master/docs
#+ATTR_LATEX: :height 0.5\textheight
[[file:figs/captura_bookvis.png]]


*** Página web de *usuario u organización*

1. Crea un repositorio nuevo con el nombre =<username>.github.io=[fn:6].
2. Sube (=commit= + =push=) un fichero =index.html= a la rama =master= con código HTML.
3. Con un navegador ve a la dirección [[https://<username>.github.io]]

#+begin_src html
<!DOCTYPE HTML>
<html>
	<head>
		<title>Hello World</title>
	</head>
	<body>
		Hello World!
	</body>
</html>
#+end_src

*** Ejemplo de web de *organización*

- Página web: https://aigora.github.io/
- Repositorio: https://github.com/aigora/aigora.github.io


[[file:figs/captura_aigora.png]]

* Footnotes

[fn:16] Es recomendable emplear el correo electrónico de la UPM (será útil más tarde, al usar GitHub Classroom).

[fn:15] [[https://docs.github.com/es/free-pro-team@latest/education/manage-coursework-with-github-classroom/manage-classrooms#creating-a-roster-for-your-classroom][Creating a roster for your classroom (GitHub Docs)]]

[fn:14]https://git-scm.com/docs/git-checkout 

[fn:13][[https://guides.github.com/introduction/flow/][Understanding the GitHub Flow]] 

[fn:9]https://chris.beams.io/posts/git-commit/ 

[fn:12]https://stackoverflow.com/help/mcve 

[fn:11]Veáse la guía [[https://help.github.com/articles/basic-writing-and-formatting-syntax/][Basic Writing and Formatting syntax]]. 

[fn:10]Veáse la guía [[https://help.github.com/articles/autolinked-references-and-urls/][Autolinked references and urls]]. 

[fn:8]https://guides.github.com/features/issues/ 

[fn:7] Más información sobre formato Markdown https://guides.github.com/features/mastering-markdown/. 

[fn:6] Siendo =<username>= tu nombre de usuario en GitHub. 

[fn:5] Más detalles en [[https://help.github.com/categories/visualizing-repository-data-with-graphs/][Ver información del repositorio de forma gráfica]]. 

[fn:4] Más información en [[https://help.github.com/desktop/guides/getting-started-with-github-desktop/configuring-git-for-github-desktop/][Configuring Git]].

[fn:3] Más información en [[https://help.github.com/desktop/guides/getting-started-with-github-desktop/authenticating-to-github/][Authenticating to GitHub]].

[fn:2]https://swcarpentry.github.io/git-novice/ 

[fn:1]https://git-scm.com/book/es/v1/Empezando-Acerca-del-control-de-versiones 
